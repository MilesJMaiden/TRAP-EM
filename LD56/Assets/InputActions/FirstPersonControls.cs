//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/InputActions/FirstPersonControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FirstPersonControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FirstPersonControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FirstPersonControls"",
    ""maps"": [
        {
            ""name"": ""FirstPersonPlayer"",
            ""id"": ""81fe58ea-ed99-4b39-b4f4-6e3824b24bad"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""edd706b9-f88f-48ca-8eac-9700c297e862"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d683afb2-88a5-4250-beda-ab9934ac71af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""21deddea-08e6-4b13-bff4-9c22541e6f56"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""17cad4c4-93e8-4ffe-a45c-88d9af89b0dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector (WASD)"",
                    ""id"": ""21f613c8-13c4-4b4d-8306-56a878ca6302"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8a601b45-e925-4026-b33f-818ef5f34b18"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""24e314ce-0ac7-40df-994a-7e57703a0093"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""81daaa47-be1a-44d2-8585-d84fe7388313"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ec22481c-5324-4e63-b5a4-9f71ffe2412d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""007e6f43-a2b0-4cfa-b811-e189e31f6c43"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d882d86-ebdb-44f5-805f-de99c5de4d53"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a57cf5c8-97ae-4b31-9740-4b749db6dd84"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FirstPersonPlayer
        m_FirstPersonPlayer = asset.FindActionMap("FirstPersonPlayer", throwIfNotFound: true);
        m_FirstPersonPlayer_Movement = m_FirstPersonPlayer.FindAction("Movement", throwIfNotFound: true);
        m_FirstPersonPlayer_Jump = m_FirstPersonPlayer.FindAction("Jump", throwIfNotFound: true);
        m_FirstPersonPlayer_Look = m_FirstPersonPlayer.FindAction("Look", throwIfNotFound: true);
        m_FirstPersonPlayer_Shoot = m_FirstPersonPlayer.FindAction("Shoot", throwIfNotFound: true);
    }

    ~@FirstPersonControls()
    {
        UnityEngine.Debug.Assert(!m_FirstPersonPlayer.enabled, "This will cause a leak and performance issues, FirstPersonControls.FirstPersonPlayer.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FirstPersonPlayer
    private readonly InputActionMap m_FirstPersonPlayer;
    private List<IFirstPersonPlayerActions> m_FirstPersonPlayerActionsCallbackInterfaces = new List<IFirstPersonPlayerActions>();
    private readonly InputAction m_FirstPersonPlayer_Movement;
    private readonly InputAction m_FirstPersonPlayer_Jump;
    private readonly InputAction m_FirstPersonPlayer_Look;
    private readonly InputAction m_FirstPersonPlayer_Shoot;
    public struct FirstPersonPlayerActions
    {
        private @FirstPersonControls m_Wrapper;
        public FirstPersonPlayerActions(@FirstPersonControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_FirstPersonPlayer_Movement;
        public InputAction @Jump => m_Wrapper.m_FirstPersonPlayer_Jump;
        public InputAction @Look => m_Wrapper.m_FirstPersonPlayer_Look;
        public InputAction @Shoot => m_Wrapper.m_FirstPersonPlayer_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_FirstPersonPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IFirstPersonPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_FirstPersonPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FirstPersonPlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IFirstPersonPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IFirstPersonPlayerActions instance)
        {
            if (m_Wrapper.m_FirstPersonPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFirstPersonPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_FirstPersonPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FirstPersonPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FirstPersonPlayerActions @FirstPersonPlayer => new FirstPersonPlayerActions(this);
    public interface IFirstPersonPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
